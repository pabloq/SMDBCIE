// file: CBRKbBeanFactory.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ontology.CBR;

import jade.content.Concept;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import ontology.common.Description;
import ontology.common.Descriptor;
import ontology.common.MSCharacterDescriptor;
import ontology.common.MSHeuristicDescriptor;
import ontology.common.RVCharacterDescriptor;
import ontology.common.RVHeuristicDescriptor;
import ontology.common.RangeValue;
import ontology.common.SSCharacterDescriptor;
import ontology.common.SSHeuristicDescriptor;
import ontology.common.SVCharacterDescriptor;
import ontology.common.SVHeuristicDescriptor;
import ontology.common.SingleValue;
import ontology.taxonomy.IsPredecessorTaxonOf;
import ontology.taxonomy.IsRootTaxon;
import ontology.taxonomy.IsSheetTaxon;
import ontology.taxonomy.IsSuccessorTaxonOf;
import ontology.taxonomy.Modifier;
import ontology.taxonomy.Taxon;
import ontology.taxonomy.WeightedDescription;
import ontology.taxonomy.WeightedDescriptor;

//import jade.util.leap.ArrayList;

import edu.stanford.smi.protege.model.KnowledgeBase;
import edu.stanford.smi.protege.model.Instance;
import edu.stanford.smi.protege.model.Slot;

/** file: CBRKbBeanFactory.java
 * @author ontology bean generator
 * @version 2009/10/6, 23:03:27
 */
public class CBRKbBeanFactory {
  private static final long serialVersionUID = 4206237779038972396L;

  private KnowledgeBase kb = null;
  private java.util.HashMap<String, Object> beanInstances = null;
  public static java.util.HashMap<String, String> typeToMethodName = new java.util.HashMap<String, String> ();

  //private Object tempAnyValue;
  private Boolean tempBooleanValue;
  //private Class tempClsValue;
  private Float tempFloatValue;
  private Instance tempInstanceValue;
  //private Integer tempIntegerValue;
  private String tempStringValue;
  private String tempSymbolValue;

  //private java.util.ArrayList  tempAnyValues;
  //private java.util.ArrayList <Boolean> tempBooleanValues;
  //private java.util.ArrayList <Class> tempClsValues;
  //private java.util.ArrayList <Float> tempFloatValues;
  private java.util.ArrayList <Instance> tempInstanceValues;
  //private java.util.ArrayList <Integer> tempIntegerValues;
  //private java.util.ArrayList <String> tempStringValues;
  //private java.util.ArrayList <String> tempSymbolValues;


  //Constructor(s)
  public CBRKbBeanFactory(KnowledgeBase kb) {
    this.kb = kb;

    beanInstances = new java.util.HashMap<String, Object>();
  }


  /**
   * Protege name: EnvironmentalCategory
  */
  public String getEnvironmentalCategory(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (String)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    String javaInst = new String();

    beanInstances.put(instanceName, javaInst);

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "term" ) );
    if (tempStringValue != null) {
      javaInst = tempStringValue;
    }

    return javaInst;
  }

  /**
   * It's a subclass of a defined term
   * Protege name: Structure
  */
  public String getStructure(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (String)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    String javaInst = null; //OJO

    //javaInst set all properties

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "term" ) );
    if (tempStringValue != null) {
      javaInst = tempStringValue;
    }
    
    beanInstances.put(instanceName, javaInst);
    
    return javaInst;
  }

  /**
   * It's a subclass of a defined term
   * Protege name: Attribute
  */
  public String getAttribute(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (String)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    String javaInst = null; //OJO

    //javaInst set all properties

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "term" ) );
    if (tempStringValue != null) {
      javaInst = tempStringValue;
    }
    
    beanInstances.put(instanceName, javaInst);

    return javaInst;
  }

  /**
   * It's a subclass of a defined term
   * Protege name: State
  */
  public String getState(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (String)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    String javaInst = null;
    
    tempStringValue = getStringValue( protegeInst, kb.getSlot( "term" ) );
    if (tempStringValue != null) {
      javaInst = tempStringValue;
    }
    
    beanInstances.put(instanceName, javaInst);
    
    return javaInst;
  }
  
  /**
   * Protege name: Taxon
  */
  public Taxon getTaxon(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Taxon)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Taxon javaInst = new Taxon(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties

    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "level" ) );
    if (tempSymbolValue != null) {
      javaInst.setLevel(tempSymbolValue);
    }
    
    tempStringValue = getStringValue( protegeInst, kb.getSlot( "name" ) );
    if (tempStringValue != null) {
      javaInst.setName(tempStringValue);
    }
    
    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "successors" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addSuccessor( (Taxon) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"successors\" in instance " + instanceName);
        }
      }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "predecessor" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setPredecessor( (Taxon) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"predecessor\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "weightedDescription" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("WeightedDescription") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setWeightedDescription( (WeightedDescription) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"weightedDescription\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: SingleValue
  */
  public SingleValue getSingleValue(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (SingleValue)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    SingleValue javaInst = new SingleValue(instanceName);

    beanInstances.put(instanceName, javaInst);

    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "measuringUnit" ) );
    if (tempSymbolValue != null) {
      javaInst.setMeasuringUnit(tempSymbolValue);
    }

    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "value" ) );
    if (tempFloatValue != null) {
      javaInst.setValue(tempFloatValue.doubleValue());
    }

    return javaInst;
  }

  /**
   * Protege name: MSCharacterDescriptor
  */
  public MSCharacterDescriptor getMSCharacterDescriptor(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (MSCharacterDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    MSCharacterDescriptor javaInst = new MSCharacterDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: SVCharacterDescriptor
  */
  public SVCharacterDescriptor getSVCharacterDescriptor(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (SVCharacterDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    SVCharacterDescriptor javaInst = new SVCharacterDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValue != null) {
	      try {
	        Object referredBean = getJadeInstanceFor(tempInstanceValue);
	
	        if (referredBean != null) {
	          javaInst.setValue((SingleValue) referredBean);
	        }
	      } catch (CBRKbBeanFactoryException e) {
	        e.printStackTrace();
	      }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: RVCharacterDescriptor
  */
  public RVCharacterDescriptor getRVCharacterDescriptor(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (RVCharacterDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    RVCharacterDescriptor javaInst = new RVCharacterDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setValue( (RangeValue) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: RangeValue
  */
  public RangeValue getRangeValue(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (RangeValue)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    RangeValue javaInst = new RangeValue(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties

    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "measuringUnit" ) );
    if (tempSymbolValue != null) {
      javaInst.setMeasuringUnit(tempSymbolValue);
    }

    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "lowerBound" ) );
    if (tempFloatValue != null) {
      javaInst.setLowerBound(tempFloatValue.doubleValue());
    }

    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "upperBound" ) );
    if (tempFloatValue != null) {
      javaInst.setUpperBound(tempFloatValue.doubleValue());
    }

    return javaInst;
  }

  /**
   * Protege name: SSCharacterDescriptor
  */
  public SSCharacterDescriptor getSSCharacterDescriptor(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (SSCharacterDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    SSCharacterDescriptor javaInst = new SSCharacterDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setValue( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: SVHeuristicDescriptor
  */
  public SVHeuristicDescriptor getSVHeuristicDescriptor(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (SVHeuristicDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    SVHeuristicDescriptor javaInst = new SVHeuristicDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setValue( (SingleValue) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: RVHeuristicDescriptor
  */
  public RVHeuristicDescriptor getRVHeuristicDescriptor(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (RVHeuristicDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    RVHeuristicDescriptor javaInst = new RVHeuristicDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setValue( (RangeValue) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: Description
  */
  public Description getDescription(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Description)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Description javaInst = new Description(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "descriptors" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Descriptor") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addDescriptors( (Descriptor) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"descriptors\" in instance " + instanceName);
        }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: SSHeuristicDescriptor
  */
  public SSHeuristicDescriptor getSSHeuristicDescriptor(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (SSHeuristicDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    SSHeuristicDescriptor javaInst = new SSHeuristicDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setValue( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: MSHeuristicDescriptor
  */
  public MSHeuristicDescriptor getMSHeuristicDescriptor(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (MSHeuristicDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    MSHeuristicDescriptor javaInst = new MSHeuristicDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (String) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    return javaInst;
  }
 
  /**
   * Protege name: WeightedDescriptor
  */
  public WeightedDescriptor getWeightedDescriptor(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (WeightedDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    WeightedDescriptor javaInst = new WeightedDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "descriptor" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Descriptor") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setDescriptor( (Descriptor) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"descriptor\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "modifier" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Modifier") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setModifier( (Modifier) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"modifier\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: WeightedDescription
  */
  public WeightedDescription getWeightedDescription(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (WeightedDescription)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    WeightedDescription javaInst = new WeightedDescription(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "weightedDescriptors" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("WeightedDescriptor") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addWeightedDescriptors( (WeightedDescriptor) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"weightedDescriptors\" in instance " + instanceName);
        }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: Modifier
  */
  public Modifier getModifier(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Modifier)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Modifier javaInst = new Modifier(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "attributeWeight" ) );
    if (tempFloatValue != null) {
      javaInst.setAttributeWeight(tempFloatValue);
    }

    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "structureWeight" ) );
    if (tempFloatValue != null) {
      javaInst.setStructureWeight(tempFloatValue);
    }

    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "scoreWeight" ) );
    if (tempFloatValue != null) {
      javaInst.setValueWeight(tempFloatValue);
    }

    return javaInst;
  }
  
  /**
   * Protege name: IsSheetTaxon
  */
  public IsSheetTaxon getIsSheetTaxon(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsSheetTaxon)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsSheetTaxon javaInst = new IsSheetTaxon(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "taxon" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setTaxon( (Taxon) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"taxon\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: IsRootTaxon
  */
  public IsRootTaxon getIsRootTaxon(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsRootTaxon)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsRootTaxon javaInst = new IsRootTaxon(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "taxon" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setTaxon( (Taxon) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"taxon\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: IsPredecessorTaxonOf
  */
  public IsPredecessorTaxonOf getIsPredecessorTaxonOf(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsPredecessorTaxonOf)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsPredecessorTaxonOf javaInst = new IsPredecessorTaxonOf(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "subjectTaxon" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setSubjectTaxon( (Taxon) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"subjectTaxon\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "objectTaxon" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setObjectTaxon( (Taxon) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"objectTaxon\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: IsSuccessorTaxonOf
  */
  public IsSuccessorTaxonOf getIsSuccessorTaxonOf(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsSuccessorTaxonOf)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsSuccessorTaxonOf javaInst = new IsSuccessorTaxonOf(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "subjectTaxon" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setSubjectTaxon( (Taxon) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"subjectTaxon\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "objectTaxon" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setObjectTaxon( (Taxon) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"objectTaxon\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: ProposedSolution
  */
  public ProposedSolution getProposedSolution(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (ProposedSolution)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    ProposedSolution javaInst = new ProposedSolution(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "certaintyDegree" ) );
    if (tempSymbolValue != null) {
      javaInst.setCertaintyDegree(tempSymbolValue);
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "evaluatedSolution" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("ProposedSolution") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setSolution( (PossibleSolution) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"proposedSolution\" in instance " + instanceName);
        }
    }

    tempBooleanValue = getBooleanValue( protegeInst, kb.getSlot( "state" ) );
    if (tempBooleanValue != null) {
      javaInst.setState(tempBooleanValue);
    }

    return javaInst;
  }

  /**
   * Protege name: PossibleSolution
  */
  public PossibleSolution getPossibleSolution(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (PossibleSolution)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    PossibleSolution javaInst = new PossibleSolution(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "points" ) );
    if (tempFloatValue != null) {
      javaInst.setPoints(tempFloatValue);
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "confirmedDescription" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setConfirmedDescription( (Description) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"confirmedDescription\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "possibleSolution" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setSolution( (Concept) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "unconfirmedDescription" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setUnconfirmedDescription( (Description) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"unconfirmedDescription\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "solutionDescription" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setSolutionDescription( (Description) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"solutionDescription\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "doubtfulDescription" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setDoubtfulDescription( (Description) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"doubtfulDescription\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "contradictions" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setContradictions( (Description) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"contradictions\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: Solution
  */
  public Solution getSolution(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Solution)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Solution javaInst = new Solution(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "rank" ) );
    if (tempSymbolValue != null) {
      javaInst.setTaxonLevel(tempSymbolValue.toUpperCase());
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "justification" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setJustification( (Description) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"justification\" in instance " + instanceName);
        }
    }

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "name" ) );
    if (tempStringValue != null) {
      javaInst.setTaxonName(tempStringValue);
    }

    return javaInst;
  }

  /**
   * Protege name: Problema
  */
  public Problem getProblem(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Problem)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Problem javaInst = new Problem(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "description" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setDescription( (Description) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"description\" in instance " + instanceName);
        }
    }

    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "goalRank" ) );
    if (tempSymbolValue != null) {
      javaInst.setGoalRank(tempSymbolValue);
    }

    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "leastSimilarityDegree" ) );
    if (tempSymbolValue != null) {
      javaInst.setLeastSimilarityDegree(tempSymbolValue);
    }

    return javaInst;
  }

  /**
   * Protege name: Case
  */
  public Case getCase(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Case)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Case javaInst = new Case(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "solution" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Solution") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setSolution( (Solution) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"solution\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "problema" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problema") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setProblem( (Problem) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"problema\" in instance " + instanceName);
        }
    }

    tempBooleanValue = getBooleanValue( protegeInst, kb.getSlot( "state" ) );
    if (tempBooleanValue != null) {
      javaInst.setState(tempBooleanValue);
    }

    return javaInst;
  }
  
  /**
   * Protege name: Hypothesis
  */
  public Hypothesis getHypothesis(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Hypothesis)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Hypothesis javaInst = new Hypothesis(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "possibleSolutions" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("PossibleSolution") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addPossibleSolution( (PossibleSolution) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"possibleSolutions\" in instance " + instanceName);
        }
      }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "justification" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setJustification( (Description) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"justification\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "description" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setDescription( (Description) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"description\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "unmatchedDescription" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setUnmatchedDescription( (Description) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"unmatchedDescription\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: Retain
  */
  public Retain getRetain(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Retain)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Retain javaInst = new Retain(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "case" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Case") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setCase( (Case) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"case\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: Resolve
  */
  public Resolve getResolve(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Resolve)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Resolve javaInst = new Resolve(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "problema" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problema") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setProblema( (Problem) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"problema\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: Adapt
  */
  public Adapt getAdapt(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Adapt)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Adapt javaInst = new Adapt(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "successfulConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addSuccessfulConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"successfulConflictSet\" in instance " + instanceName);
        }
      }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "failureConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addFailureConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"failureConflictSet\" in instance " + instanceName);
        }
      }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "to" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setTo( (Problem) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"to\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: Retrieve
  */
  public Retrieve getRetrieve(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Retrieve)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Retrieve javaInst = new Retrieve(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "similarTo" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problema") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setSimilarTo( (Problem) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"similarTo\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: AreReasonableSolutionsTo
  */
  public AreReasonableSolutionsTo getAreReasonableSolutionsTo(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (AreReasonableSolutionsTo)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    AreReasonableSolutionsTo javaInst = new AreReasonableSolutionsTo(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "problema" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problema") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setProblem( (Problem) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"problema\" in instance " + instanceName);
        }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "proposedSolutions" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("ProposedSolution") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addProposedSolutions( (ProposedSolution) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"proposedSolutions\" in instance " + instanceName);
        }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: IsTheMostReasonableTo
  */
  public IsTheMostReasonableTo getIsTheMostReasonableTo(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsTheMostReasonableTo)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsTheMostReasonableTo javaInst = new IsTheMostReasonableTo(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "proposedSolution" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("ProposedSolution") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setProposedSolution( (ProposedSolution) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"proposedSolution\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "problema" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problema") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setProblema( (Problem) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"problema\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: IsPositive
  */
  public IsPositive getIsPositive(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsPositive)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsPositive javaInst = new IsPositive(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "case" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Case") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setCase( (Case) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"case\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: IsNegative
  */
  public IsNegative getIsNegative(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsNegative)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsNegative javaInst = new IsNegative(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "case" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Case") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setCase( (Case) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"case\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: AreSimilarTo
  */
  public AreSimilarTo getAreSimilarTo(String instanceName) throws CBRKbBeanFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (AreSimilarTo)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBeanFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    AreSimilarTo javaInst = new AreSimilarTo(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "successfulConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addSuccessfulConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"successfulConflictSet\" in instance " + instanceName);
        }
      }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "failureConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addFailureConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"failureConflictSet\" in instance " + instanceName);
        }
      }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "problem" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setProblem( (Problem) referredBean);
            }
          } catch (CBRKbBeanFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBeanFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"problem\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  //Typed access methods to slot values
  private static Instance getInstanceValue(Instance theInst, Slot theSlot) {
    return (Instance)theInst.getOwnSlotValue(theSlot);
  }

  @SuppressWarnings("unchecked")
  private static java.util.ArrayList<Instance> getInstanceValues(Instance theInst, Slot theSlot) {
    return new java.util.ArrayList<Instance>(theInst.getOwnSlotValues(theSlot));
  }

  private static Float getFloatValue(Instance theInst, Slot theSlot) {
    return (Float)theInst.getOwnSlotValue(theSlot);
  }

  private static String getStringValue(Instance theInst, Slot theSlot) {
    return (String)theInst.getOwnSlotValue(theSlot);
  }

  private static Boolean getBooleanValue(Instance theInst, Slot theSlot) {
    return (Boolean)theInst.getOwnSlotValue(theSlot);
  }

  public Object getJadeInstanceFor(Instance tempInstanceValue) throws CBRKbBeanFactoryException {
    //TODO test for multiple types
    String methodName = typeToMethodName.get(tempInstanceValue.getDirectType().getName());
    if (methodName != null) {
      try {
        Method method = this.getClass().getMethod(methodName, new Class[] {Class.forName("java.lang.String")});
        return method.invoke(this, new Object[] {tempInstanceValue.getName()});
      }
      catch (SecurityException e) {
         throw new CBRKbBeanFactoryException(e);
      } catch (NoSuchMethodException e) {
         throw new CBRKbBeanFactoryException(e);
      } catch (ClassNotFoundException e) {
         throw new CBRKbBeanFactoryException(e);
      }
      catch (IllegalArgumentException e) {
         throw new CBRKbBeanFactoryException("Exception while invoking method " + methodName + " for instance " + tempInstanceValue.getName(), e);
      } catch (IllegalAccessException e) {
         throw new CBRKbBeanFactoryException("Exception while invoking method " + methodName + " for instance " + tempInstanceValue.getName(), e);
      } catch (InvocationTargetException e) {
         throw new CBRKbBeanFactoryException("Exception while invoking method " + methodName + " for instance " + tempInstanceValue.getName(), e);
      }
    }
    return null;
  }

  static {
    typeToMethodName.put("Taxon", "getTaxon");
    typeToMethodName.put("WeightedDescription", "getWeightedDescription");
    typeToMethodName.put("State", "getState");
    typeToMethodName.put("WeightedDescriptor", "getWeightedDescriptor");
    typeToMethodName.put("Structure", "getStructure");
    typeToMethodName.put("ProposedSolution", "getProposedSolution");
    typeToMethodName.put("EnvironmentalCategory", "getEnvironmentalCategory");
    typeToMethodName.put("PossibleSolution", "getPossibleSolution");
    typeToMethodName.put("Solution", "getSolution");
    typeToMethodName.put("Problem", "getProblem");
    typeToMethodName.put("Modifier", "getModifier");
    typeToMethodName.put("Case", "getCase");
    typeToMethodName.put("RangeValue", "getRangeValue");
    typeToMethodName.put("SSCharacterDescriptor", "getSSCharacterDescriptor");
    typeToMethodName.put("QualitativeCharacterDescriptor", "getQualitativeCharacterDescriptor");
    typeToMethodName.put("SingleValue", "getSingleValue");
    typeToMethodName.put("Hypothesis", "getHypothesis");
    typeToMethodName.put("QuantitativeHeuristicDescriptor", "getQuantitativeHeuristicDescriptor");
    typeToMethodName.put("SVHeuristicDescriptor", "getSVHeuristicDescriptor");
    typeToMethodName.put("RVHeuristicDescriptor", "getRVHeuristicDescriptor");
    typeToMethodName.put("Description", "getDescription");
    typeToMethodName.put("SSHeuristicDescriptor", "getSSHeuristicDescriptor");
    typeToMethodName.put("MSHeuristicDescriptor", "getMSHeuristicDescriptor");
    typeToMethodName.put("MSCharacterDescriptor", "getMSCharacterDescriptor");
    typeToMethodName.put("Attribute", "getAttribute");
    typeToMethodName.put("SVCharacterDescriptor", "getSVCharacterDescriptor");
    typeToMethodName.put("RVCharacterDescriptor", "getRVCharacterDescriptor");
    typeToMethodName.put("Retain", "getRetain");
    typeToMethodName.put("Resolve", "getResolve");
    typeToMethodName.put("Adapt", "getAdapt");
    typeToMethodName.put("Retrieve", "getRetrieve");
    typeToMethodName.put("Describes", "getDescribes");
    typeToMethodName.put("AreReasonableSolutionsTo", "getAreReasonableSolutionsTo");
    typeToMethodName.put("IsTheMostReasonableTo", "getIsTheMostReasonableTo");
    typeToMethodName.put("Owns", "getOwns");
    typeToMethodName.put("ApliesTo", "getApliesTo");
    typeToMethodName.put("IsSuccessorTaxonOf", "getIsSuccessorTaxonOf");
    typeToMethodName.put("DescribedBy", "getDescribedBy");
    typeToMethodName.put("IsPredecessorTaxonOf", "getIsPredecessorTaxonOf");
    typeToMethodName.put("IsPositive", "getIsPositive");
    typeToMethodName.put("IsRootTaxon", "getIsRootTaxon");
    typeToMethodName.put("IsNegative", "getIsNegative");
    typeToMethodName.put("IsSheetTaxon", "getIsSheetTaxon");
    typeToMethodName.put("AreSimilarTo", "getAreSimilarTo");
  }

}
